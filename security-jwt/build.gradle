plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id("org.jooq.jooq-codegen-gradle") version "3.19.10"
}

group = 'org.carl'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/central' }
    mavenCentral()
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("-parameters")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    runtimeOnly 'com.mysql:mysql-connector-j'
    jooqCodegen 'com.mysql:mysql-connector-j'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}
def mySrcDir = 'src/main/java'
def generatedDir = 'src/main/generated'
sourceSets {
    main {
        java {
            srcDir generatedDir
            srcDir mySrcDir
        }
    }
}
idea {
    module {
        generatedSourceDirs.addAll(file(generatedDir))
        sourceDirs.addAll(file(generatedDir))
        sourceDirs.addAll(file(mySrcDir))
    }
}

jooq {
    configuration {
        jdbc {
            url = "jdbc:mysql://localhost:3306/db"
            driver = "com.mysql.cj.jdbc.Driver"
            user = "root"
            password = "root"
        }
        generator {

//            name = "org.jooq.meta.mysql.MySQLDatabase"

            // Optional: The jooq-meta configuration, configuring the information schema source.
            database {
                inputSchema = "db"
            }

            // Optional: The jooq-codegen configuration, configuring the generated output content.
            generate {
                pojos = true
                daos = true
            }

            // Optional: The generation output target
            target {
                packageName = "org.carl.generated"
                directory = "src/main/generated"
            }
        }
    }
}
