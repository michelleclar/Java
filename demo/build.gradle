plugins {
    id 'java'
    id 'idea'
    id 'io.quarkus'
//    id 'org.kordamp.gradle.jandex'
}
dependencies {
    implementation project(':common')
    implementation enforcedPlatform(libs.quarkusPlaform)
    implementation libs.bundles.jooq
    // implementation 'io.quarkus:quarkus-vertx-graphql'
    implementation libs.slf4jJbossLogmanager
    implementation libs.agroal
    implementation libs.bundles.allJdbc
    implementation libs.bundles.vertx
    implementation libs.bundles.quarkus
    implementation libs.bundles.allDBReactiveClient
    implementation libs.bundles.testcontainers
}

group 'org.carl'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty 'java.util.logging.manager', 'org.jboss.logmanager.LogManager'
}
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

//tasks.register('write') {
//    // read file
//    def properties = new Properties()
//    file('src/main/resources/application.properties').withInputStream {
//        stream -> properties.load(stream)
//    }
//    def framework = 'quarkus'
//    def datasource = ''
//    switch (framework){
//        case 'quarkus':
//            datasource='quarkus.datasource'
//            break
//        case 'spring' :
//            datasource='spring.datasource'
//            break
//    }
//
//    println properties.getProperty('quarkus.datasource.jdbc.url')
//    println properties.getProperty('quarkus.datasource.username')
//    println properties.getProperty('quarkus.datasource.password')
//    properties.forEach((k,v)->{
//        println(k)
//        println(v)
//    })
//    new File('src/main/resources/db.properties').withWriter('UTF-8') { writer ->
//        writer.writeLine(properties.getProperty('quarkus.datasource.jdbc.url'))
//        writer.writeLine(properties.getProperty('quarkus.datasource.username'))
//        writer.writeLine(properties.getProperty('quarkus.datasource.password'))
//    }
//
//}
// configure generated/src-directories, necessary for use in intellij-idea.
def mySrcDir = 'src/main/java'
def generatedDir = 'src/main/generated'
sourceSets {
    main {
        java {
            srcDir generatedDir
            srcDir mySrcDir
        }
    }
}
idea {
    module {
        generatedSourceDirs.addAll(file(generatedDir))
        sourceDirs.addAll(file(generatedDir))
        sourceDirs.addAll(file(mySrcDir))
    }
}

// jooqCodeGenerator task
tasks.register('generateJooqCode', JavaExec) {
    group = 'application'
    description = 'Runs JooqCodeGenerator Java Application'
    mainClass = 'org.carl.jooq.generator.JooqCodeGenerator'
    classpath = sourceSets.main.runtimeClasspath
}
